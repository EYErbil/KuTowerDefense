@startuml
skinparam actorPosition top
skinparam participantPosition top

actor Player
participant ":MainMenuScreen"
participant ":MapEditorController"
participant ":MapEditorScreen"
participant ":MapSerializer"
participant ":Map"
participant ":ValidationService"

Player ->> ":MainMenuScreen": clickEditMap()
activate ":MainMenuScreen"
":MainMenuScreen" ->> ":MapEditorController": openMapEditor()
activate ":MapEditorController"
":MapEditorController" -->> ":MainMenuScreen": return
deactivate ":MainMenuScreen"

opt edit existing map
    ":MapEditorController" ->> ":MapSerializer": loadMapList()
    activate ":MapSerializer"
    ":MapSerializer" -->> ":MapEditorController": availableMaps
    deactivate ":MapSerializer"
    ":MapEditorController" -->> Player: showMapSelection()
    Player ->> ":MapEditorController": selectMap(mapName)
    activate ":MapEditorController"
    ":MapEditorController" ->> ":MapSerializer": loadMap(mapName)
    activate ":MapSerializer"
    ":MapSerializer" -->> ":MapEditorController": mapData
    deactivate ":MapSerializer"
    deactivate ":MapEditorController"
end

create ":Map"
":MapEditorController" ->> ":Map": newMap(mapData)
activate ":Map"
":Map" ->> ":Map": initializeGrid()
":Map" -->> ":MapEditorController": initializedMap
deactivate ":Map"

create ":MapEditorScreen"
":MapEditorController" ->> ":MapEditorScreen": initialize(initializedMap)
activate ":MapEditorScreen"
":MapEditorScreen" ->> ":MapEditorScreen": setupEditorUI()
":MapEditorScreen" -->> Player: display editor
deactivate ":MapEditorScreen"
deactivate ":MapEditorController"
deactivate ":MapEditorController"

loop editing
    Player ->> ":MapEditorScreen": selectTile / clickGrid
    activate ":MapEditorScreen"
    ":MapEditorScreen" ->> ":MapEditorController": placeTile(position, tileType)
    activate ":MapEditorController"
    ":MapEditorController" ->> ":Map": setTileAt(position, tileType)
    activate ":Map"
    ":Map" ->> ":Map": updateTile()
    ":MapEditorController" ->> ":MapEditorScreen": updateGrid()
    deactivate ":Map"
    ":MapEditorScreen" -->> Player: updated view
    deactivate ":MapEditorScreen"
    deactivate ":MapEditorController"

    alt tile is path
        ":MapEditorController" ->> ":Map": updatePath()
        activate ":Map"
        ":Map" ->> ":Map": recalculateConnectivity()
        deactivate ":Map"
    end
end

Player ->> ":MapEditorScreen": clickSaveMap()
activate ":MapEditorScreen"
":MapEditorScreen" ->> ":MapEditorController": saveMap()
activate ":MapEditorController"
activate ":MapEditorController"
":MapEditorController" -->> ":MapEditorScreen": return
deactivate ":MapEditorScreen"

":MapEditorController" ->> Player: promptMapName()
Player ->> ":MapEditorController": provideName(name)
":MapEditorController" ->> ":ValidationService": validateMap()
activate ":ValidationService"
":ValidationService" ->> ":ValidationService": checkStartPoint()
":ValidationService" ->> ":ValidationService": checkEndPoint()
":ValidationService" ->> ":ValidationService": checkPathConnectivity()
":ValidationService" ->> ":ValidationService": checkTowerSlots()
":ValidationService" -->> ":MapEditorController": result
deactivate ":ValidationService"

alt valid
    ":MapEditorController" ->> ":Map": setName(name)
    activate ":Map"
    deactivate ":Map"
    ":MapEditorController" ->> ":MapSerializer": saveMap()
    activate ":MapSerializer"
    ":MapSerializer" -->> ":MapEditorController": saveSuccess
    deactivate ":MapSerializer"
    ":MapEditorController" -->> Player: showSuccess()
    deactivate ":MapEditorController"
else invalid
    ":MapEditorController" -->> Player: showErrors()
    deactivate ":MapEditorController"
end
@enduml
